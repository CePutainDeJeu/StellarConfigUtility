@using StellarConfigUtility.Interfaces;
@using StellarConfigUtility.Models;
@inject IDataAccessService _service;

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
	 aria-modal="true" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">Add New Stellar Technology</h4>
			</div>
			<div class="modal-body">
				<EditForm Model="@tech" OnValidSubmit="@HandleValidSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary />

					<label>
						Technology Name:
						<InputText id="TechName" @bind-Value="tech.Name" />
					</label>

					<label>
						Tech Cost:
						<InputNumber id="TechCost" @bind-Value="tech.Cost" />
					</label>

					<label>
						Tech Tier:
						<InputNumber id="TechTier" @bind-Value="tech.Tier" />
					</label>

					<label>
						Tech Cost Weight:
						<InputNumber id="TechWeight" @bind-Value="tech.Weight" />
					</label>

					<label>
						Tech Category:
						<InputText id="TechCategory" @bind-Value="tech.Category" />
					</label>

					<label>
						Tech Tree:
						<InputText id="TechTree" @bind-Value="tech.Tree" />
					</label>

					<label>
						Prerequisites:
						<InputText id="TechPrereqs" @bind-Value="tech.Prerequisites" />
					</label>

					<button type="submit">Submit Tech</button>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@code {
	@inject NavigationManager NavigationManager;

	[Parameter]
	public EventCallback<bool> OnClose { get; set; }

	[Parameter]
	public Technology tech { get; set; }

	private void HandleValidSubmit()
	{
		_service.UpdateTechnology(tech);
		OnClose.InvokeAsync(true);
	}
	}
