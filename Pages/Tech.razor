@page "/tech"
@using StellarConfigUtility.Models
@using StellarConfigUtility.Interfaces;
@using StellarConfigUtility.Components;
@inject IDataAccessService _service;
@inject IJSRuntime JsRuntime;

@if (NewTechnologyDialogOpen)
{
	<TechnologyDialog OnClose="@OnNewTechnologyDialogClose" Technology="@NewTechnology" IsEditting="false"></TechnologyDialog>;
}
@if (EditTechnologyDialogOpen)
{
	<TechnologyDialog OnClose="@OnEditTechnologyDialogClose" Technology="@EditTarget" IsEditting="true"></TechnologyDialog>;
}

<button @onclick="() => OpenNewTechnologyDialog()">Add New Technology</button>

<br />
<br />

<table class="table">
	<thead>
		<tr>
			<th>
				Name
			</th>
			<th>
				Cost
			</th>
			<th>
				Tree
			</th>
			<th>
				Tier
			</th>
			<th>
				Category
			</th>
			<th>
				Weight
			</th>
			<th>
				Prerequisites
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in _service.GetTechnologies())
		{
			<tr>
				<td>
					@item.Name
				</td>
				<td>
					@item.Cost
				</td>
				<td>
					@item.Tree
				</td>
				<td>
					@item.Tier
				</td>
				<td>
					@item.Category
				</td>
				<td>
					@item.Weight
				</td>
				<td>
					@item.Prerequisites
				</td>
				<td>
					<button @onclick="@(() => OpenEditTechnologyDialog(@item) )">
						Edit
					</button>
					<button @onclick="@(() => DeleteTech(@item) )">
						Delete
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {
	@inject NavigationManager NavigationManager;
	public bool NewTechnologyDialogOpen { get; set; }
	public bool EditTechnologyDialogOpen { get; set; }
	private Technology EditTarget { get; set; }
	private Technology NewTechnology { get; set; } = new Technology();
	private async void DeleteTech(Technology tech)
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{tech.Name}'?");
		if (confirmed)
		{
			_service.DeleteTechnology(tech.TechnologyId);
			NavigationManager.NavigateTo("tech", true);
		}
	}

	private void OpenNewTechnologyDialog()
	{
		NewTechnologyDialogOpen = true;
	}
	private void OpenEditTechnologyDialog(Technology editTarget)
	{
		EditTechnologyDialogOpen = true;
		EditTarget = editTarget;
	}

	private async Task OnNewTechnologyDialogClose(bool accepted)
	{
		NewTechnologyDialogOpen = false;
		NavigationManager.NavigateTo("tech", true);
	}

	private async Task OnEditTechnologyDialogClose(bool accepted)
	{
		EditTechnologyDialogOpen = false;
		NavigationManager.NavigateTo("tech", true);
	}
}